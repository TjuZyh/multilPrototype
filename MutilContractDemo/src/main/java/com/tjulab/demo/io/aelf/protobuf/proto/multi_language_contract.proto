/* This files is part of the Hello World smart contract example that is included in Boilerplate.
 * It is only the definition of the contract, implementation is located in the "contract" folder
 * and tests are located in the "test" folder.
 *
 * You can use this as a basic template for new contracts.
 * 
 * When building Boilerplate or the contract project located in the "../contract/Tank.MultiLanguageContract/" 
 * protoc (the protobuf compiler) will be invoked and this file will produce a .c.cs file and .g.cs file, in the 
 * "../contract/Tank.MultiLanguageContract/Protobuf/Generated/" folder. 
 */

// the version of the language, use proto3 for contracts
syntax = "proto3";

// some core imports for aelf chain types
import "aelf/core.proto";
import "aelf/options.proto";

// import for using the google.protobuf.Empty type.
import "google/protobuf/empty.proto";

// the name of the C# namespace in which the contract code will be,
// generated code will also be in this namespace.
option csharp_namespace = "Tank.MultiLanguageContract";

// the contract definition: a gRPC service definition.
service MultiLanguageContract {

    // the full name of the C# class that will contain the state (here <namespace>.<state-class-name> format).
    option (aelf.csharp_state) = "Tank.MultiLanguageContract.MultiLanguageContractState";

    // an action defined as a gRPC service method.
    // this action take a google.protobuf.Empty (placeholder for void) as input
    // and returns a custom defined type: HelloReturn.
    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) { }
    rpc Get (GetInput) returns (GetReturn) { }
    rpc Set (SetInput) returns (google.protobuf.Empty) { }
}

// a custom message, used as the return type of the Hello action
message InitializeInput {
    string flag = 1;
}

message GetInput {
    string className = 1;
}
message SetInput {
    string className = 1;
    string jsonString = 2;
}
// json string format of class
message GetReturn {
    string jsonString = 1;
}
// to store user address and class name 
message AddressName {
    aelf.Address address = 1;
    string className = 2;
}
// a list to store class names
message NameList {
    repeated GetInput nameList = 1;
}
// a list to store class json string
message JsonStringList {
    repeated GetReturn jsonStringList = 1;
}